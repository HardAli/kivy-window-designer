from peewee import SqliteDatabase, Model, CharField, IntegerField, ForeignKeyField

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "materials.db"
db = SqliteDatabase(DB_NAME)


class BaseModel(Model):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    class Meta:
        database = db


class Category(BaseModel):
    """–ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    name = CharField(unique=True)

    def __str__(self):
        return f"Category(id={self.id}, name='{self.name}')"


class Material(BaseModel):
    """–ú–æ–¥–µ–ª—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
    code = CharField(unique=True)
    name = CharField()
    price = IntegerField()
    category = ForeignKeyField(Category, backref="materials", on_delete="CASCADE")

    def __str__(self):
        return f"Material(id={self.id}, code='{self.code}', name='{self.name}', price={self.price}, category='{self.category.name}')"


class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        db.connect()
        db.create_tables([Category, Material], safe=True)

    def add_category(self, name: str, materials: list = []) -> Category:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –æ–Ω–∏ —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è."""
        category, created = Category.get_or_create(name=name)

        for material in materials:
            self.add_material(material["code"], material["name"], material["price"], category.name)

        return category

    def add_material(self, code: str, name: str, price: int, category_name: str) -> Material:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."""
        category = self.add_category(category_name)  # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –æ–Ω–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è
        material, created = Material.get_or_create(code=code, defaults={"name": name, "price": price, "category": category})
        if not created:
            material.name = name
            material.price = price
            material.category = category
            material.save()
        return material

    def delete_category(self, name: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ –µ—ë –º–∞—Ç–µ—Ä–∏–∞–ª—ã."""
        try:
            category = Category.get(Category.name == name)
            category.delete_instance(recursive=True)  # –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            return True
        except Category.DoesNotExist:
            return False

    def delete_material(self, code: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –µ–≥–æ –∫–æ–¥—É."""
        try:
            material = Material.get(Material.code == code)
            material.delete_instance()
            return True
        except Material.DoesNotExist:
            return False

    def update_material(self, code: str, name: str = None, price: int = None, category_name: str = None) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞."""
        try:
            material = Material.get(Material.code == code)
            if name:
                material.name = name
            if price:
                material.price = price
            if category_name:
                material.category = self.add_category(category_name)
            material.save()
            return True
        except Material.DoesNotExist:
            return False

    def get_all_categories(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        return [category.name for category in Category.select()]

    def get_all_materials(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
        return [str(material) for material in Material.select()]

    def get_materials_by_category(self, category_name: str) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        try:
            category = Category.get(Category.name == category_name)
            return [str(material) for material in category.materials]
        except Category.DoesNotExist:
            return []  # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

    def search_material_by_code(self, code: str) -> str:
        """–ò—â–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∫–æ–¥—É."""
        try:
            material = Material.get(Material.code == code)
            return str(material)
        except Material.DoesNotExist:
            return "–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"

    def search_material_by_name(self, name: str) -> list:
        """–ò—â–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∏–º–µ–Ω–∏ (—á–∞—Å—Ç–∏—á–Ω—ã–π –ø–æ–∏—Å–∫)."""
        return [str(material) for material in Material.select().where(Material.name.contains(name))]

    def calculate_total_cost(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."""
        return sum(material.price for material in Material.select())

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        db.close()


# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
if __name__ == "__main__":
    db_manager = DatabaseManager()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    db_manager.add_category("–†—É—á–∫–∞", [
        {"code": "HND-001", "name": "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Ä—É—á–∫–∞", "price": 150},
        {"code": "HND-002", "name": "–ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è —Ä—É—á–∫–∞", "price": 250},
        {"code": "HND-003", "name": "–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è —Ä—É—á–∫–∞", "price": 100}
    ])

    db_manager.add_category("–°—Ç–µ–∫–ª–æ", [
        {"code": "GLS-001", "name": "–ó–∞–∫–∞–ª–µ–Ω–Ω–æ–µ —Å—Ç–µ–∫–ª–æ", "price": 500},
        {"code": "GLS-002", "name": "–û–±—ã—á–Ω–æ–µ —Å—Ç–µ–∫–ª–æ", "price": 300}
    ])

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    print("\nüìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    print(db_manager.get_all_categories())

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    print("\nüì¶ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")
    print(db_manager.get_all_materials())

    # –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∫–æ–¥—É
    print("\nüîç –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ –∫–æ–¥—É 'HND-002':")
    print(db_manager.search_material_by_code("HND-002"))

    # –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∏
    print("\nüîé –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∏ '—Ä—É—á–∫–∞':")
    print(db_manager.search_material_by_name("—Ä—É—á–∫–∞"))

    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    print("\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
    print(db_manager.calculate_total_cost())

    # –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    db_manager.delete_material("HND-003")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    db_manager.delete_category("–°—Ç–µ–∫–ª–æ")

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    print("\nüì¶ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:")
    print(db_manager.get_all_materials())

    db_manager.close()
